<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[慎独]]></title>
  <link href="http://signifox.github.com/atom.xml" rel="self"/>
  <link href="http://signifox.github.com/"/>
  <updated>2012-10-31T09:55:53+08:00</updated>
  <id>http://signifox.github.com/</id>
  <author>
    <name><![CDATA[Shawhu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CheckToken]]></title>
    <link href="http://signifox.github.com/blog/2012/10/26/check-token/"/>
    <updated>2012-10-26T00:00:00+08:00</updated>
    <id>http://signifox.github.com/blog/2012/10/26/check-token</id>
    <content type="html"><![CDATA[<h4>一.题目</h4>

<p>检查token字符串是否合法，token可以有多个user:passwd 对，每个user:passwd 对之间至少有一个空格, user和passwd之间不能有任何空格，且都只能为字母或者数字。</p>

<h4>二.我的代码</h4>

<div>
  <pre><code class='c'>enum STATUS{
    ST_INIT,
    ST_USER,
    ST_SPLIT,
    ST_TOKEN
};

bool check(const char * token){
    const char * p = token;

    bool hasToken = false; 
    bool hasError = false;
    STATUS status = ST_INIT;

    while((p != NULL) &amp;&amp; (*p != '\0')){
        switch( status){
            case ST_INIT:
            if( isalnum(*p) ){
                status = ST_USER;
            }else if(*p != ' '){
                hasError = true;
            }
            break;
            case ST_USER:
            if(*p == ':'){
                status = ST_SPLIT;
            }else if( !isalnum(*p) ){
                hasError = true;
            }
            break;
            case ST_SPLIT:
            if( isalnum(*p)){
                hasToken = true;
                status = ST_TOKEN;
            }else{
                hasError = true;
            }
            break;
            case ST_TOKEN:
            if(*p == ' '){
                status = ST_INIT;
            }else if( !isalnum(*p) ){
                hasError = true;
            }
            break;
        }
        if( !hasError ){
            p++;
        }else{
            break;
        }
    } 
    return ( !hasError &amp;&amp; hasToken );
}</code></pre>
</div>




<!-- more -->


<h4>三.同事的代码</h4>

<div>
  <pre><code class='c'>bool IsToken(const char* token){
    const int N = strlen(token);
    int i,nLeft=0,nRight=0,nPair=0,nColon=0;
    for(i=0;i&lt;N;i++){
        if(!(isalnum(token[i]) || token[i] == ':' || token[i] == ' ')){
            return false;
        }
        if(token[i] == ':'){
            if(nColon == 1 || nLeft == 0){ //avoid &quot;a::b&quot;,&quot;:b&quot; &quot;a: b&quot;
                return false;
            }
            nColon = 1;
        }else if(token[i] == ' '){
            if(nLeft &gt; 0 &amp;&amp; nColon == 1 &amp;&amp; nRight &gt; 0){ //true
                nPair++;
                nColon = nRight = nLeft = 0;
            }else if(nLeft == 0 &amp;&amp; nColon == 0 &amp;&amp; nRight == 0){ //true
            }else{
                return false;
            }
        }else{ //alpha or number
            if(nColon == 0){
                nLeft++;
            }else{
                nRight++;
            }
        }
    }
    if(nLeft &gt; 0 &amp;&amp; nColon == 1 &amp;&amp; nRight &gt; 0){ //the last pair
        nPair++;
    }
    return nPair &gt; 0;
}</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM插件配置]]></title>
    <link href="http://signifox.github.com/blog/2012/10/22/vim-set/"/>
    <updated>2012-10-22T00:00:00+08:00</updated>
    <id>http://signifox.github.com/blog/2012/10/22/vim-set</id>
    <content type="html"><![CDATA[<h4>配置原则</h4>

<p>Vim配置的基本目标是提供简单快速全面兼容的配置文件，减少重复配置的时间，覆盖主要功能，避免因为vim原教旨主义而拼命地往vim加载的一些非常不友好的插件(比如用vim的项目管理插件，如此不如用IDE)。</p>

<hr />

<h4>插件列表</h4>

<p><a href="http://www.vim.org/scripts/script.php?script_id=31">a.vim</a>                &#8212;-          h/cpp 互相转化</p>

<p><a href="http://www.vim.org/scripts/script.php?script_id=52">calendar.vim</a>         &#8212;-          美观的日历插件</p>

<p><a href="http://cscope.sourceforge.net/cscope_maps.vim">cscope_maps.vim</a>      &#8212;-          cscope按键绑定</p>

<p><a href="http://www.vim.org/scripts/script.php?script_id=159">minibufexpl.vim</a>      &#8212;-          浏览buf缓冲器</p>

<p><a href="http://www.vim.org/scripts/script.php?script_id=2540">snipMate.vim</a>         &#8212;-          处理snippet块</p>

<p><a href="http://www.vim.org/scripts/script.php?script_id=182">supertab.vim</a>         &#8212;-          智能tab功能</p>

<p><a href="http://www.vim.org/scripts/script.php?script_id=273">taglist.vim</a>          &#8212;-          tag列表浏览</p>

<!-- more -->


<hr />

<h4>我的vimrc配置文件</h4>

<div>
  <pre><code class='c'>&quot;font encode
set encoding=utf-8
set langmenu=zh_CN.UTF-8
language message zh_CN.UTF-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030
set fileencoding=utf-8
 
&quot;global setting
set nocompatible
set noexpandtab
set cindent
set autoindent
set smartindent
set showmatch
set number
set ruler
set nocp
syntax on
filetype plugin indent on
 
set backspace=2
set tabstop=4
set softtabstop=4
set shiftwidth=4
set list
set listchars=tab:&gt;-,trail:-
&quot;set cscopequickfix=s-,c-,d-,i-,t-,e- 
set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
&quot;code fold
set foldmethod=syntax
set foldlevel=100
set cursorline
hi CursorLine   cterm=NONE ctermbg=white ctermfg=blue
hi CursorColumn cterm=NONE ctermbg=white ctermfg=blue
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;

colorscheme desert
set t_Co=256
 
&quot;taglist
let Tlist_Show_One_File = 1
let Tlist_WinWidth = 30
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1
 
&quot;miniBufExplorer
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
let g:miniBufExplMoreThanOne=0
 
nmap &lt;silent&gt; &lt;F2&gt; :!gdb&lt;cr&gt;
nmap &lt;silent&gt; &lt;F3&gt; :!make -j 8&lt;cr&gt;
nmap &lt;silent&gt; &lt;F4&gt; &lt;Leader&gt;cal&lt;cr&gt;
nmap &lt;silent&gt; &lt;F5&gt; gg=G&lt;cr&gt;
nmap &lt;silent&gt; &lt;F6&gt; :TlistToggle&lt;cr&gt;
nmap &lt;silent&gt; &lt;F7&gt; :split&lt;cr&gt;
nmap &lt;silent&gt; &lt;F11&gt; :bp!&lt;cr&gt;
nmap &lt;silent&gt; &lt;F12&gt; :bn!&lt;cr&gt;

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot;omniCppComplete
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
set completeopt=longest,menuone
let OmniCpp_DefaultNamespaces = [&quot;std&quot;]
let OmniCpp_NamespaceSearch = 1
let OmniCpp_MayCompleteDot = 1
let OmniCpp_MayCompleteArrow = 1
let OmniCpp_MayCompleteScope = 1
let OmniCpp_ShowScopeInAbbr = 1
let OmniCpp_ShowPrototypeInAbbr = 1
 
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot;super tab
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
let g:SuperTabRetainCompletionType=2
let g:SuperTabDefaultCompletionType=&quot;&lt;C-X&gt;&lt;C-O&gt;&quot;</code></pre>
</div>


<hr />

<h4>其他vim风格的插件</h4>

<p><a href="http://www.vimperator.org/vimperator">Vimperator</a>一个vim风格的firefox插件，可以在笔记本上使用键盘操作firefox，适合没有鼠标时(例如开会)方便的操作firefox浏览网页。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[const的毛病]]></title>
    <link href="http://signifox.github.com/blog/2012/10/10/const-override/"/>
    <updated>2012-10-10T00:00:00+08:00</updated>
    <id>http://signifox.github.com/blog/2012/10/10/const-override</id>
    <content type="html"><![CDATA[<h3>C++在参数及函数名相同的情况下，const可以构成函数重载。</h3>

<div>
  <pre><code class='c'>- void function(){};
- void function() const{};

-class Object{
public:
    inline void function(){}
    inline coid function()const{}   
};</code></pre>
</div>


<p>两者调用优先级如下：</p>

<ul>
<li>类中两种函数都存在时：

<ol>
<li>const对象默认调用const成员函数，非const对象默认调用非const成员函数;</li>
<li>若非const对象想调用const成员函数，则需显式转化，如(const Object&amp;)obj.function();</li>
<li>若const对象想调用非const成员函数，同理const_cast&lt;Object&amp;>(constObj).function()(注意：constObj要加括号);</li>
<li>普通函数（相对于类的成员函数），优先调用非const的函数。</li>
</ol>
</li>
</ul>


<!-- more -->


<ul>
<li>类中只存在一种函数时：

<ol>
<li>非const对象可以调用const成员函数或非const成员函数;</li>
<li>const对象只能调用const成员函数,直接调用非const函数时编译器会报错;</li>
<li>普通函数可以调用const或者非const函数;</li>
<li>const 函数只能调用 const函数，即使某个函数本质上没有修改任何数据，但没有声明为const，也是不能被const函数调用的。</li>
</ol>
</li>
</ul>


<p>说明：
const成员函数不能更改任何非静态成员变量;</p>

<hr />

<h3>const和typedef的 化学反应</h3>

<p>typedef string* pstring;</p>

<p>const pstring cstr;</p>

<p>问题：cstr 是什么类型？</p>

<p>正确的答案应该是：const 指针指向一个 string 类型的对象。</p>

<p>《C++ Primer》：</p>

<blockquote><p>const pstring cstr1;
string* const cstr2;</p>

<p>const string str1;
string const str2;</p></blockquote>

<p>两者类型也相同。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll On OpenShift]]></title>
    <link href="http://signifox.github.com/blog/2012/10/10/Jekyll-OpenShift/"/>
    <updated>2012-10-10T00:00:00+08:00</updated>
    <id>http://signifox.github.com/blog/2012/10/10/Jekyll-OpenShift</id>
    <content type="html"><![CDATA[<h1>1. 创建Openshift应用</h1>

<hr />

<p><a href="https://openshift.redhat.com">OpenShift</a>是redhat公司推出的一个PaaS云计算应用平台台。申请账号之后，创建使用DIY框架的Application，同时在网站添加相应的SSH 公钥保证git可以正常提交。</p>

<div>
  <pre><code class='c'>ssh-keygen</code></pre>
</div>


<p>将~/.ssh/id_rsa.pub中内容拷给网站的SSH Key里。</p>

<p>OpenShift提供私有的git仓库，创建的应用可以直接通过git提交和SSH登录访问，这一步需要事先设置SSH Key。</p>

<p>git仓库地址示例:</p>

<div>
  <pre><code class='c'>ssh://f44e1c405e8642eeba13fa0536b15fe8@blog-huxiao.rhcloud.com/~/git/blog.git/</code></pre>
</div>


<p>ssh登录方式：</p>

<div>
  <pre><code class='c'>ssh://f44e1c405e8642eeba13fa0536b15fe8@blog-huxiao.rhcloud.com</code></pre>
</div>




<!-- more -->


<h1>2. 准备空间环境</h1>

<hr />

<h4>ssh登录服务器，各目录文件说明如下：</h4>

<ul>
<li>~/app-root/data/目录，存放静态数据，包含一个.bash_profile</li>
<li>~/app-root/repo/目录，存放git的repo数据，git push时会修改。</li>
<li>~/app-root/runtime/目录，各种系统脚本</li>
<li>~/.env/目录，系统提供的各种环境变量，只能读不能写</li>
<li>~/blog是~/diy-0.1的软链接</li>
<li>~/diy-0.1/，包含blog_ctl.sh,ci,data,logs,repo ,run ,runtime,tmp，很多软链接</li>
<li>~/app-root/repo/.openshift/action_hooks/目录 ，包含一些脚本，start，stop，build，deploy等。</li>
</ul>


<h4>修改系统环境变量</h4>

<p>由于默认home目录是root用户创建的，我们没有读写权限。
修改~/app-root/data/.bash_profile，添加</p>

<div>
  <pre><code class='c'>export HOME=/var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/app-root/runtime

source ~/app-root/data/.bash_profile</code></pre>
</div>


<p>此时Home目录变成用户有读写权限的runtime目录了。</p>

<p>修改自定义环境变量，由于系统从~/.env导入环境变量,cd 到runtime目录，执行</p>

<div>
  <pre><code class='c'>cp /var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/.env . -fr</code></pre>
</div>


<p>,修改.env/PATH添加ruby1.9的目录，添加.env/LD_LIBRARY_PATH导入ruby1.9的运行库。</p>

<p>PATH内容：</p>

<div>
  <pre><code class='c'>export PATH=/opt/rh/ruby193/root/usr/bin:/usr/libexec/stickshift/cartridges/diy-0.1/info/bin/:/usr/libexec/stickshi
ft/cartridges/abstract/info/bin/:/sbin:/usr/sbin:/bin:/usr/bin</code></pre>
</div>


<p>LD_LIBRARY_PATH内容：</p>

<div>
  <pre><code class='c'>export LD_LIBRARY_PATH=/opt/rh/ruby193/root/usr/lib64:</code></pre>
</div>


<p>导入生效。</p>

<div>
  <pre><code class='c'>source ~/.env/PATH 
source ~/.env/LD_LIBRARY_PATH</code></pre>
</div>


<h4>安装Jekyll</h4>

<div>
  <pre><code class='c'>gem install jekyll

gem install rdiscount

gem install RedCloth</code></pre>
</div>


<p>修改PATH变量</p>

<div>
  <pre><code class='c'>vi ~/.env/PATH
export PATH=$HOME/bin:/opt/rh/ruby193/root/usr/bin:/usr/libexec/stickshift/cartridges/diy-0.1/info/bin/:/usr/libexec/stickshi
ft/cartridges/abstract/info/bin/:/sbin:/usr/sbin:/bin:/usr/bin</code></pre>
</div>


<p>jekyll  &#8211;serverk 可以启动一个ruby的Web服务器。当然需要一些修改，在Jekyll的ruby脚本启动服务器时，添加IP和Port的config。然而这个服务器性能较差，下面安装Nginx服务器代替。</p>

<h4>安装Pygments</h4>

<p>为了代码高亮，需要使用pygements。可怜的普通用户没有万恶的权限，无奈只好自己安装python2.7.3先.</p>

<div>
  <pre><code class='c'>wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2

wget http://pypi.python.org/packages/source/s/setuptools/setuptools-0.6c11.tar.gz

wget http://pypi.python.org/packages/source/p/pip/pip-1.1.tar.gz

war zxf pip-1.1.tar.gz

cd Python-2.7.3

./configure --prefix=$OPENSHIFT_RUNTIME_DIR

make install

cd setuptools-0.6c11

$OPENSHIFT_RUNTIME_DIR/bin/python setup.py install

cd pip-1.1

$OPENSHIFT_RUNTIME_DIR/bin/python setup.py install

pip install pygments</code></pre>
</div>


<p>修改环境变量</p>

<div>
  <pre><code class='c'>export PATH=$OPENSHIFT_RUNTIME_DIR/bin:$PATH</code></pre>
</div>


<p>这一步在~/.env/PATH文件中修改。</p>

<h4>安装Nginx</h4>

<div>
  <pre><code class='c'>cd $OPENSHIFT_TMP_DIR

wget http://nginx.org/download/nginx-1.2.4.tar.gz

tar zxf nginx-1.2.4.tar.gz

wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.31.tar.bz2

tar jxf pcre-8.31.tar.bz2

cd nginx-1.2.4

./configure --prefix=$OPENSHIFT_RUNTIME_DIR/ --with-pcre=$OPENSHIFT_TMP_DIR/pcre-8.31

make &amp;&amp; make install</code></pre>
</div>


<p>修改nginx.conf文件，主要是IP和Port,以及一些优化。以下是我的部分配置文件：</p>

<div>
  <pre><code class='c'>worker_processes  4;
worker_cpu_affinity 0001 0010 0100 1000;

worker_rlimit_nofile 10240;

events {
    use epoll;
    worker_connections  10240;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    server {
        listen       ip:port;  #####################Mofity On Demand
        server_name  shawhu.org;

        charset utf-8;

        location / {
            root   html;
            index  index.html index.htm;
        }
    }
}</code></pre>
</div>


<h4>配置 start 和stop脚本</h4>

<p>将start修改成启动nginx，将stop修改成关闭nginx</p>

<p>start配置文件如下：</p>

<div>
  <pre><code class='c'>#!/bin/bash
nohup $OPENSHIFT_RUNTIME_DIR/sbin/nginx   &gt; $OPENSHIFT_LOG_DIR/server.log 2&gt;&amp;1 &amp;</code></pre>
</div>


<p>stop配置文件如下：</p>

<div>
  <pre><code class='c'>#!/bin/bash
ps -ef | grep nginx | while read line
do
  kill -9 `echo $line | awk '{ print $2 }'`
done
exit 0</code></pre>
</div>


<h4>配置Jekyll</h4>

<p>编辑jekyll的配置文件_config.yml,主要是源路径和目的路径</p>

<div>
  <pre><code class='c'>source: /var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/app-root/runtime/repo/
destination: /var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/app-root/runtime/html
markdown: rdiscount
permalink: /:year/:month/:title/
url: http://shawhu.org
author: signifox
pygments: true
paginate: 16</code></pre>
</div>


<h4>配置buid文件</h4>

<p>注意_config.yml文件存放在~/bin/目录下。
编辑build文件,似乎git push调用hook时，我自定义的环境变量没有生效，造成Jekyll失效。同时Openshift贴心的为我准备了zh_CN.utf-8编码方式，造成ruby解码失败。</p>

<div>
  <pre><code class='c'>#!/bin/bash
export LANG=&quot;en_US.UTF-8&quot;
export LC_ALL=&quot;en_US.UTF-8&quot;

export HOME='/var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/app-root/runtime/'
export LD_LIBRARY_PATH=/opt/rh/ruby193/root/usr/lib64:
export PATH=/opt/rh/ruby193/root/usr/bin:$HOME/bin:/usr/libexec/stickshift/cartridges/diy-0.1/info/bin/:/usr/libexec/stickshift/cartridges/abstract/info/bin/:/sbin:/usr/sbin:/bin:/usr/bin

cd $OPENSHIFT_RUNTIME_DIR/bin/

$OPENSHIFT_RUNTIME_DIR/bin/jekyll

export LANG=&quot;zh_CN.UTF-8&quot;
export LC_ALL=&quot;zh_CN.UTF-8&quot;

export HOME='/var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/'
export PATH=/usr/libexec/stickshift/cartridges/diy-0.1/info/bin/:/usr/libexec/stickshift/cartridges/abstract/info/bin/:/sbin:/usr/sbin:/bin:/usr/bin</code></pre>
</div>


<h1>3. 大功告成</h1>

<hr />

<p>现在在本地编写MakrDown文件，git push时自动停止服务器，编译源文件，部署静态网页到nginx的工作目录，然后重启服务。</p>

<p>现在一切都自动化了，类似Github的发布方式，系统自动完成了所有的事情。此外系统还有执行动态网页的潜力，相比Github更加灵活方便。</p>

<h1>4. 参考</h1>

<hr />

<ol>
<li><p><a href="http://www.soimort.org/tech-blog/2011/11/19/introduction-to-jekyll_zh.html">像黑客一样写博客——Jekyll入门</a></p></li>
<li><p><a href="https://openshift.redhat.com/community/blogs/lightweight-http-serving-using-nginx-on-openshift">Lightweight HTTP serving using nginx on OpenShift | OpenShift by Red Hat</a></p></li>
<li><p><a href="http://blog.gideal.org/articles/2012/09/05/1346782192657.html">OpenShift DIY自己的服务器环境python2.7+django</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://signifox.github.com/blog/2012/09/16/hello-world/"/>
    <updated>2012-09-16T00:00:00+08:00</updated>
    <id>http://signifox.github.com/blog/2012/09/16/hello-world</id>
    <content type="html"><![CDATA[<hr />

<h3>一.Hello World</h3>

<div>
  <pre><code class='c'>- int main(int argc, char *argv[])
{
    printf(&quot;Hello World, Thanks GitHub and OpenShift\n&quot;);   
    return 0;
}</code></pre>
</div>


<h3>二.申请域名，开通博客</h3>

<ul>
<li>域名从Godaddy购买， 托管在DNSPod上。</li>
<li>空间采用Jekyll框架，托管在OpenShift上。</li>
<li>文章使用MarkDown编写，使用私有Git发布。</li>
<li>服务器使用Nginx程序， 使用SSH管理。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gentoo 中文化指南]]></title>
    <link href="http://signifox.github.com/blog/2010/08/08/gentoo-locale/"/>
    <updated>2010-08-08T00:00:00+08:00</updated>
    <id>http://signifox.github.com/blog/2010/08/08/gentoo-locale</id>
    <content type="html"><![CDATA[<h4>设置locale</h4>

<p>编辑/etc/locale.gen中添加</p>

<div>
  <pre><code class='c'>zh_CN.UTF-8
zh_CN.GBK
zh_CN.GB2312
zh_CN.GB18030</code></pre>
</div>


<p>然后运行locale-gen命令</p>

<h4>设置默认locale环境</h4>

<p>编辑/etc/env.d/02locale</p>

<div>
  <pre><code class='c'>LANG=&quot;zh_CN.UTF-8&quot;
LC_CTYPE=&quot;zh_CN.UTF-8&quot;
LC_NUMERIC=&quot;en_US.UTF-8&quot;
LC_TIME=&quot;en_US.UTF-8&quot;
LC_COLLATE=&quot;en_US.UTF-8&quot;
LC_MONETARY=&quot;en_US.UTF-8&quot;
LC_MESSAGES=&quot;en_US.UTF-8&quot;
LC_PAPER=&quot;en_US.UTF-8&quot;
LC_NAME=&quot;en_US.UTF-8&quot;
LC_ADDRESS=&quot;en_US.UTF-8&quot;
LC_TELEPHONE=&quot;en_US.UTF-8&quot;
LC_MEASUREMENT=&quot;en_US.UTF-8&quot;
LC_IDENTIFICATION=&quot;en_US.UTF-8&quot;</code></pre>
</div>




<!-- more -->


<h4>加入新的字体文件</h4>

<p>在／usr/share/fonts现新建一个文件夹，如msfonts。到window的fonts目录下拷贝一些ttf和ttc结尾的字体(正版爱好者可下载免费的自由的开源的中文字体代替，下步配置文件需要相应修改)。字体文件我已经打包，一共48M，存放在百度网盘。包括Microsoft YaHei，Microsoft JhengHei，Segoe UI，Courier New，下载地址：<a href="http://pan.baidu.com/share/link?shareid=94048&amp;uk=2986497451">猛击此处</a>，正版爱好者可以无视。</p>

<div>
  <pre><code class='c'>emerge mkfontdir mkfontscale
mkfontdir
mkfontscale
fc-cache -fv</code></pre>
</div>


<p>更新字体</p>

<h4>更新配置文件</h4>

<p>编辑／etc/fonts/local.conf(全局配置)或者~/.font.conf(当前配置)</p>

<div>
  <pre><code class='xml'>&lt;?xml version=&quot;2.0&quot;?&gt;
&lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&gt;

&lt;fontconfig&gt;

&lt;match target=&quot;pattern&quot; &gt;
    &lt;edit name=&quot;dpi&quot; mode=&quot;assign&quot; &gt;
        &lt;double&gt;90&lt;/double&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;match target=&quot;font&quot; &gt;
    &lt;edit name=&quot;rgba&quot; mode=&quot;assign&quot; &gt;
        &lt;const&gt;rgb&lt;/const&gt;
    &lt;/edit&gt;
&lt;/match&gt;
&lt;match target=&quot;font&quot; &gt;
    &lt;edit name=&quot;antialias&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;autohint&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hinting&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;false&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hintstyle&quot; mode=&quot;assign&quot; &gt;
        &lt;const&gt;hintslight&lt;/const&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;!-- Sans-serif faces --&gt;
&lt;alias&gt;
    &lt;family&gt;Segoe UI&lt;/family&gt;
    &lt;family&gt;SimSunNew&lt;/family&gt;
    &lt;family&gt;Microsoft YaHei&lt;/family&gt;
    &lt;family&gt;Microsoft JhengHei&lt;/family&gt;
&lt;/alias&gt;

&lt;!-- Serif faces --&gt;
&lt;alias&gt;
    &lt;family&gt;SimSunNew&lt;/family&gt;
    &lt;family&gt;serif&lt;/family&gt;
&lt;/alias&gt;

&lt;!-- Monospace faces --&gt;
&lt;alias&gt;
    &lt;family&gt;SimSunNew&lt;/family&gt;
&lt;/alias&gt;

&lt;alias&gt;
    &lt;family&gt;sans-serif&lt;/family&gt;
    &lt;prefer&gt;
        &lt;family&gt;Segoe UI&lt;/family&gt;
        &lt;family&gt;Microsoft YaHei&lt;/family&gt;
        &lt;family&gt;Microsoft JhengHei&lt;/family&gt;
        &lt;family&gt;SimSunNew&lt;/family&gt;
    &lt;/prefer&gt;
&lt;/alias&gt;

&lt;alias&gt;
    &lt;family&gt;serif&lt;/family&gt;
    &lt;prefer&gt;
        &lt;family&gt;Microsoft YaHei&lt;/family&gt;
        &lt;family&gt;Microsoft JhengHei&lt;/family&gt;
        &lt;family&gt;SimSunNew&lt;/family&gt;
    &lt;/prefer&gt;
&lt;/alias&gt;

&lt;alias&gt;
    &lt;family&gt;SimSunNew&lt;/family&gt;
    &lt;prefer&gt;
        &lt;family&gt;SimSunNew&lt;/family&gt;
        &lt;family&gt;Microsoft JhengHei&lt;/family&gt;
        &lt;family&gt;Microsoft YaHei&lt;/family&gt;
        &lt;family&gt;Courier New&lt;/family&gt;
    &lt;/prefer&gt;
&lt;/alias&gt;

&lt;alias&gt;
    &lt;family&gt;Arial&lt;/family&gt;
    &lt;prefer&gt;
        &lt;family&gt;Segoe UI&lt;/family&gt;
    &lt;/prefer&gt;
    &lt;default&gt;
        &lt;family&gt;sans-serif&lt;/family&gt;
    &lt;/default&gt;
&lt;/alias&gt;
&lt;alias&gt;
    &lt;family&gt;SimSunNew&lt;/family&gt;
&lt;/alias&gt;

&lt;!-- Sans-Serif --&gt;
&lt;match target=&quot;font&quot; &gt;
    &lt;test name=&quot;family&quot; compare=&quot;eq&quot; &gt;
        &lt;string&gt;Segoe UI&lt;/string&gt;
    &lt;/test&gt;
    &lt;edit name=&quot;rgba&quot; mode=&quot;assign&quot;&gt;
        &lt;const&gt;rgb&lt;/const&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;antialias&quot; mode=&quot;assign&quot;&gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;autohint&quot; mode=&quot;assign&quot;&gt;
        &lt;bool&gt;false&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hinting&quot; mode=&quot;assign&quot;&gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hintstyle&quot; mode=&quot;assign&quot;&gt;
        &lt;const&gt;hintslight&lt;/const&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;match target=&quot;font&quot; &gt;
    &lt;test qual=&quot;any&quot; name=&quot;family&quot; compare=&quot;eq&quot; &gt;
        &lt;string&gt;SimSunNew&lt;/string&gt;
    &lt;/test&gt;
    &lt;edit name=&quot;rgba&quot; mode=&quot;assign&quot;&gt;
        &lt;const&gt;rgb&lt;/const&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;antialias&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;autohint&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;false&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hinting&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hintstyle&quot; mode=&quot;assign&quot; &gt;
        &lt;const&gt;hintslight&lt;/const&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;match target=&quot;font&quot; &gt;
    &lt;test target=&quot;pattern&quot; name=&quot;lang&quot; compare=&quot;contains&quot; &gt;
        &lt;string&gt;zh&lt;/string&gt;
    &lt;/test&gt;
    &lt;test name=&quot;spacing&quot; compare=&quot;eq&quot; &gt;
        &lt;const&gt;dual&lt;/const&gt;
    &lt;/test&gt;
    &lt;edit name=&quot;spacing&quot; mode=&quot;assign&quot; &gt;
        &lt;const&gt;proportional&lt;/const&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;globaladvance&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;false&lt;/bool&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;match target=&quot;font&quot;&gt;
    &lt;test name=&quot;lang&quot; compare=&quot;contains&quot; &gt;
        &lt;string&gt;zh&lt;/string&gt;
    &lt;/test&gt;
    &lt;test name=&quot;outline&quot; compare=&quot;eq&quot; &gt;
        &lt;bool&gt;false&lt;/bool&gt;
    &lt;/test&gt;
    &lt;test name=&quot;spacing&quot; compare=&quot;eq&quot; &gt;
        &lt;const&gt;mono&lt;/const&gt;
        &lt;const&gt;charcell&lt;/const&gt;
    &lt;/test&gt;
    &lt;edit name=&quot;spacing&quot;&gt;
        &lt;const&gt;proportional&lt;/const&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;globaladvance&quot; binding=&quot;strong&quot; &gt;
        &lt;bool&gt;false&lt;/bool&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;!-- Chinese Simple Font --&gt;
&lt;match target=&quot;font&quot; &gt;
    &lt;test qual=&quot;any&quot; name=&quot;family&quot; compare=&quot;eq&quot; &gt;
        &lt;string&gt;Microsoft YaHei&lt;/string&gt;
    &lt;/test&gt;
    &lt;edit name=&quot;rgba&quot; mode=&quot;assign&quot;&gt;
        &lt;const&gt;rgb&lt;/const&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;antialias&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;autohint&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;false&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hinting&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hintstyle&quot; mode=&quot;assign&quot; &gt;
        &lt;const&gt;hintslight&lt;/const&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;!-- Chinese Tradition Font --&gt;
&lt;match target=&quot;font&quot; &gt;
    &lt;test qual=&quot;any&quot; name=&quot;family&quot; compare=&quot;eq&quot; &gt;
        &lt;string&gt;Microsoft JhengHei&lt;/string&gt;
    &lt;/test&gt;
    &lt;edit name=&quot;rgba&quot; mode=&quot;assign&quot;&gt;
        &lt;const&gt;rgb&lt;/const&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;antialias&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;autohint&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;false&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hinting&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hintstyle&quot; mode=&quot;assign&quot; &gt;
        &lt;const&gt;hintslight&lt;/const&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;!-- SimSunNew global setting. --&gt;
&lt;match target=&quot;font&quot; &gt;
    &lt;test qual=&quot;any&quot; name=&quot;family&quot; compare=&quot;eq&quot; &gt;
        &lt;string&gt;SimSunNew&lt;/string&gt;
    &lt;/test&gt;
    &lt;edit name=&quot;rgba&quot; mode=&quot;assign&quot; &gt;
        &lt;const&gt;rgb&lt;/const&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;antialias&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;autohint&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;false&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hinting&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;hintstyle&quot; mode=&quot;assign&quot; &gt;
        &lt;const&gt;hintslight&lt;/const&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;!--
SimSunNew embedded bitmap fonts, ppem = 12px, 13px, 14px, 15px, 16px, 18px.
choose as your need
--&gt;
&lt;match target=&quot;font&quot; &gt;
    &lt;test qual=&quot;any&quot; name=&quot;family&quot; compare=&quot;eq&quot; &gt;
        &lt;string&gt;SimSunNew&lt;/string&gt;
    &lt;/test&gt;
    &lt;test name=&quot;pixelsize&quot; compare=&quot;more&quot; &gt;
        &lt;double&gt;11.5&lt;/double&gt;
    &lt;/test&gt;
    &lt;test name=&quot;pixelsize&quot; compare=&quot;less&quot; &gt;
        &lt;double&gt;18.5&lt;/double&gt;
    &lt;/test&gt;
    &lt;edit name=&quot;antialias&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;false&lt;/bool&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;match target=&quot;font&quot; &gt;
    &lt;test qual=&quot;any&quot; name=&quot;family&quot; compare=&quot;eq&quot; &gt;
        &lt;string&gt;SimSunNew&lt;/string&gt;
    &lt;/test&gt;
    &lt;test name=&quot;pixelsize&quot; compare=&quot;more&quot; &gt;
        &lt;double&gt;16.5&lt;/double&gt;
    &lt;/test&gt;
    &lt;test name=&quot;pixelsize&quot; compare=&quot;less&quot; &gt;
        &lt;double&gt;17.5&lt;/double&gt;
    &lt;/test&gt;
    &lt;edit name=&quot;antialias&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;!-- Synthetic emboldening for fonts that do not have bold face available --&gt;
&lt;match target=&quot;font&quot; &gt;
    &lt;test name=&quot;weight&quot; compare=&quot;less_eq&quot;&gt;
        &lt;const&gt;medium&lt;/const&gt;
    &lt;/test&gt;
    &lt;test target=&quot;pattern&quot; name=&quot;weight&quot; compare=&quot;more&quot;&gt;
        &lt;const&gt;medium&lt;/const&gt;
    &lt;/test&gt;
    &lt;edit name=&quot;embolden&quot; mode=&quot;assign&quot; &gt;
        &lt;bool&gt;true&lt;/bool&gt;
    &lt;/edit&gt;
    &lt;edit name=&quot;weight&quot; mode=&quot;assign&quot;&gt;
        &lt;const&gt;bold&lt;/const&gt;
    &lt;/edit&gt;
&lt;/match&gt;

&lt;/fontconfig&gt;</code></pre>
</div>


<h4>中文输入法</h4>

<p>emerge scim scim-pinyin (本文例子是scim)</p>

<p>或者 emerge ibus</p>

<p>或者 emerge fcitx (推荐)</p>

<h4>中文编码配置</h4>

<p>推荐:
+ 终端</p>

<hr />

<p>编辑~/.bashrc</p>

<p>LC_CTYPE=&#8221;zh_CN.UTF-8&#8221;</p>

<ul>
<li>X窗口</li>
</ul>


<hr />

<p>编辑~/.xinitrc</p>

<div>
  <pre><code class='c'>export LC_CTYPE=&quot;zh_CN.GBK&quot;
export XMODIFIERS='@im=SCIM'
export XIM=&quot;scim&quot;
export XINPUT=&quot;scim&quot;
export XIM_PROGRAM=&quot;scim -d&quot;
export GTK_IM_MODULE=&quot;scim&quot;
export QT_IM_MODULE=&quot;xim&quot;
export OOO_FORCE_DESKTOP=gnome   (Openoffice usescim)
export XDG_MENU_PREFIX=gnome-    (QT Program like opera use scim)

scim -d &amp;

exec gnome-session</code></pre>
</div>


<h4>乱码问题</h4>

<ul>
<li>EMACS乱码：</li>
</ul>


<hr />

<p>emacs默认使用X核心字体，显示比较难看，有些中文显示为方框。加上xft后，emacs可以使用系统字体，非常美观，中文也显示正常了。使用USE＝“Xft”emerge emacs</p>

<ul>
<li>VIM中文乱码：</li>
</ul>


<hr />

<p>编辑~/.vimrc,添加 set fileencoding=gbk 和 set fileencodings=utf-8,gbk</p>

<ul>
<li>挂载windows盘乱码问题</li>
</ul>


<hr />

<p>在内核中FileSystem设置Native file system选项加上utf8，或者挂载磁盘时设置编码 mount ／dev/sda5 /mnt/udisk -o iocharset=utf-8</p>
]]></content>
  </entry>
  
</feed>
