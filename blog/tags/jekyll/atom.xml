<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: jekyll | 慎独]]></title>
  <link href="http://signifox.github.com/blog/tags/jekyll/atom.xml" rel="self"/>
  <link href="http://signifox.github.com/"/>
  <updated>2012-10-31T02:03:53+08:00</updated>
  <id>http://signifox.github.com/</id>
  <author>
    <name><![CDATA[Shawhu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jekyll On OpenShift]]></title>
    <link href="http://signifox.github.com/blog/2012/10/10/Jekyll-OpenShift/"/>
    <updated>2012-10-10T00:00:00+08:00</updated>
    <id>http://signifox.github.com/blog/2012/10/10/Jekyll-OpenShift</id>
    <content type="html"><![CDATA[<h1>1. 创建Openshift应用</h1>

<hr />

<p><a href="https://openshift.redhat.com">OpenShift</a>是redhat公司推出的一个PaaS云计算应用平台台。申请账号之后，创建使用DIY框架的Application，同时在网站添加相应的SSH 公钥保证git可以正常提交。
<div>
  <pre><code class='c'>ssh-keygen</code></pre>
</div>

将~/.ssh/id_rsa.pub中内容拷给网站的SSH Key里。</p>

<p>OpenShift提供私有的git仓库，创建的应用可以直接通过git提交和SSH登录访问，这一步需要事先设置SSH Key。</p>

<p>git仓库地址示例:
<div>
  <pre><code class='c'>ssh://f44e1c405e8642eeba13fa0536b15fe8@blog-huxiao.rhcloud.com/~/git/blog.git/</code></pre>
</div>
</p>

<p>ssh登录方式：
<div>
  <pre><code class='c'>ssh://f44e1c405e8642eeba13fa0536b15fe8@blog-huxiao.rhcloud.com</code></pre>
</div>
</p>

<!-- more -->


<h1>2. 准备空间环境</h1>

<hr />

<h4>ssh登录服务器，各目录文件说明如下：</h4>

<ul>
<li>~/app-root/data/目录，存放静态数据，包含一个.bash_profile</li>
<li>~/app-root/repo/目录，存放git的repo数据，git push时会修改。</li>
<li>~/app-root/runtime/目录，各种系统脚本</li>
<li>~/.env/目录，系统提供的各种环境变量，只能读不能写</li>
<li>~/blog是~/diy-0.1的软链接</li>
<li>~/diy-0.1/，包含blog_ctl.sh,ci,data,logs,repo ,run ,runtime,tmp，很多软链接</li>
<li>~/app-root/repo/.openshift/action_hooks/目录 ，包含一些脚本，start，stop，build，deploy等。</li>
</ul>


<h4>修改系统环境变量</h4>

<p>由于默认home目录是root用户创建的，我们没有读写权限。
修改~/app-root/data/.bash_profile，添加
<div>
  <pre><code class='c'>export HOME=/var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/app-root/runtime&lt;/p&gt;

&lt;p&gt;source ~/app-root/data/.bash_profile</code></pre>
</div>

此时Home目录变成用户有读写权限的runtime目录了。</p>

<p>修改自定义环境变量，由于系统从~/.env导入环境变量,cd 到runtime目录，执行</p>

<p><div>
  <pre><code class='c'>cp /var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/.env . -fr</code></pre>
</div>
</p>

<p>,修改.env/PATH添加ruby1.9的目录，添加.env/LD_LIBRARY_PATH导入ruby1.9的运行库。</p>

<p>PATH内容：
<div>
  <pre><code class='c'>export PATH=/opt/rh/ruby193/root/usr/bin:/usr/libexec/stickshift/cartridges/diy-0.1/info/bin/:/usr/libexec/stickshi
ft/cartridges/abstract/info/bin/:/sbin:/usr/sbin:/bin:/usr/bin</code></pre>
</div>
</p>

<p>LD_LIBRARY_PATH内容：
<div>
  <pre><code class='c'>export LD_LIBRARY_PATH=/opt/rh/ruby193/root/usr/lib64:</code></pre>
</div>
</p>

<p>导入生效。
<div>
  <pre><code class='c'>source ~/.env/PATH
source ~/.env/LD_LIBRARY_PATH</code></pre>
</div>
</p>

<h4>安装Jekyll</h4>

<p><div>
  <pre><code class='c'>gem install jekyll&lt;/p&gt;

&lt;p&gt;gem install rdiscount&lt;/p&gt;

&lt;p&gt;gem install RedCloth&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>

修改PATH变量
<div>
  <pre><code class='c'>vi ~/.env/PATH
export PATH=$HOME/bin:/opt/rh/ruby193/root/usr/bin:/usr/libexec/stickshift/cartridges/diy-0.1/info/bin/:/usr/libexec/stickshi
ft/cartridges/abstract/info/bin/:/sbin:/usr/sbin:/bin:/usr/bin&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>jekyll  --serverk 可以启动一个ruby的Web服务器。当然需要一些修改，在Jekyll的ruby脚本启动服务器时，添加IP和Port的config。然而这个服务器性能较差，下面安装Nginx服务器代替。</p>

<h4>安装Pygments</h4>

<p>为了代码高亮，需要使用pygements。可怜的普通用户没有万恶的权限，无奈只好自己安装python2.7.3先.
<div>
  <pre><code class='c'>wget http://python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2&lt;/p&gt;

&lt;p&gt;wget http://pypi.python.org/packages/source/s/setuptools/setuptools-0.6c11.tar.gz&lt;/p&gt;

&lt;p&gt;wget http://pypi.python.org/packages/source/p/pip/pip-1.1.tar.gz&lt;/p&gt;

&lt;p&gt;war zxf pip-1.1.tar.gz&lt;/p&gt;

&lt;p&gt;cd Python-2.7.3&lt;/p&gt;

&lt;p&gt;./configure --prefix=$OPENSHIFT_RUNTIME_DIR&lt;/p&gt;

&lt;p&gt;make install&lt;/p&gt;

&lt;p&gt;cd setuptools-0.6c11&lt;/p&gt;

&lt;p&gt;$OPENSHIFT_RUNTIME_DIR/bin/python setup.py install&lt;/p&gt;

&lt;p&gt;cd pip-1.1&lt;/p&gt;

&lt;p&gt;$OPENSHIFT_RUNTIME_DIR/bin/python setup.py install&lt;/p&gt;

&lt;p&gt;pip install pygments</code></pre>
</div>
</p>

<p>修改环境变量
<div>
  <pre><code class='c'>export PATH=$OPENSHIFT_RUNTIME_DIR/bin:$PATH</code></pre>
</div>
</p>

<p>这一步在~/.env/PATH文件中修改。</p>

<h4>安装Nginx</h4>

<p><div>
  <pre><code class='c'>cd $OPENSHIFT_TMP_DIR&lt;/p&gt;

&lt;p&gt;wget http://nginx.org/download/nginx-1.2.4.tar.gz&lt;/p&gt;

&lt;p&gt;tar zxf nginx-1.2.4.tar.gz&lt;/p&gt;

&lt;p&gt;wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.31.tar.bz2&lt;/p&gt;

&lt;p&gt;tar jxf pcre-8.31.tar.bz2&lt;/p&gt;

&lt;p&gt;cd nginx-1.2.4&lt;/p&gt;

&lt;p&gt;./configure --prefix=$OPENSHIFT_RUNTIME_DIR/ --with-pcre=$OPENSHIFT_TMP_DIR/pcre-8.31&lt;/p&gt;

&lt;p&gt;make &amp;amp;&amp;amp; make install</code></pre>
</div>
</p>

<p>修改nginx.conf文件，主要是IP和Port,以及一些优化。以下是我的部分配置文件：
<div>
  <pre><code class='c'>worker_processes  4;
worker_cpu_affinity 0001 0010 0100 1000;&lt;/p&gt;

&lt;p&gt;worker_rlimit_nofile 10240;&lt;/p&gt;

&lt;p&gt;events {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use epoll;
worker_connections  10240;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;http {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include       mime.types;
default_type  application/octet-stream;

server {
    listen       ip:port;  #####################Mofity On Demand
    server_name  shawhu.org;

    charset utf-8;

    location / {
        root   html;
        index  index.html index.htm;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}</code></pre>
</div>
</p>

<h4>配置 start 和stop脚本</h4>

<p>将start修改成启动nginx，将stop修改成关闭nginx</p>

<p>start配置文件如下：
<div>
  <pre><code class='c'>&lt;/p&gt;

&lt;h1&gt;!/bin/bash&lt;/h1&gt;

&lt;p&gt;nohup $OPENSHIFT_RUNTIME_DIR/sbin/nginx   &gt; $OPENSHIFT_LOG_DIR/server.log 2&gt;&amp;amp;1 &amp;amp;</code></pre>
</div>
</p>

<p>stop配置文件如下：
<div>
  <pre><code class='c'>&lt;/p&gt;

&lt;h1&gt;!/bin/bash&lt;/h1&gt;

&lt;p&gt;ps -ef | grep nginx | while read line
do
  kill -9 &lt;code&gt;echo $line | awk '{ print $2 }'&lt;/code&gt;
done
exit 0</code></pre>
</div>
</p>

<h4>配置Jekyll</h4>

<p>编辑jekyll的配置文件_config.yml,主要是源路径和目的路径
<div>
  <pre><code class='c'>source: /var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/app-root/runtime/repo/
destination: /var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/app-root/runtime/html
markdown: rdiscount
permalink: /:year/:month/:title/
url: http://shawhu.org
author: signifox
pygments: true
paginate: 16</code></pre>
</div>
</p>

<h4>配置buid文件</h4>

<p>注意_config.yml文件存放在~/bin/目录下。
编辑build文件,似乎git push调用hook时，我自定义的环境变量没有生效，造成Jekyll失效。同时Openshift贴心的为我准备了zh_CN.utf-8编码方式，造成ruby解码失败。</p>

<p><div>
  <pre><code class='c'>&lt;/p&gt;

&lt;h1&gt;!/bin/bash&lt;/h1&gt;

&lt;p&gt;export LANG=&quot;en_US.UTF-8&quot;
export LC_ALL=&quot;en_US.UTF-8&quot;&lt;/p&gt;

&lt;p&gt;export HOME='/var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/app-root/runtime/'
export LD_LIBRARY_PATH=/opt/rh/ruby193/root/usr/lib64:
export PATH=/opt/rh/ruby193/root/usr/bin:$HOME/bin:/usr/libexec/stickshift/cartridges/diy-0.1/info/bin/:/usr/libexec/stickshift/cartridges/abstract/info/bin/:/sbin:/usr/sbin:/bin:/usr/bin&lt;/p&gt;

&lt;p&gt;cd $OPENSHIFT_RUNTIME_DIR/bin/&lt;/p&gt;

&lt;p&gt;$OPENSHIFT_RUNTIME_DIR/bin/jekyll&lt;/p&gt;

&lt;p&gt;export LANG=&quot;zh_CN.UTF-8&quot;
export LC_ALL=&quot;zh_CN.UTF-8&quot;&lt;/p&gt;

&lt;p&gt;export HOME='/var/lib/stickshift/f44e1c405e8642eeba13fa0536b15fe8/'
export PATH=/usr/libexec/stickshift/cartridges/diy-0.1/info/bin/:/usr/libexec/stickshift/cartridges/abstract/info/bin/:/sbin:/usr/sbin:/bin:/usr/bin</code></pre>
</div>
</p>

<h1>3. 大功告成</h1>

<hr />

<p>现在在本地编写MakrDown文件，git push时自动停止服务器，编译源文件，部署静态网页到nginx的工作目录，然后重启服务。</p>

<p>现在一切都自动化了，类似Github的发布方式，系统自动完成了所有的事情。此外系统还有执行动态网页的潜力，相比Github更加灵活方便。</p>

<h1>4. 参考</h1>

<hr />

<ol>
<li><p><a href="http://www.soimort.org/tech-blog/2011/11/19/introduction-to-jekyll_zh.html">像黑客一样写博客——Jekyll入门</a></p></li>
<li><p><a href="https://openshift.redhat.com/community/blogs/lightweight-http-serving-using-nginx-on-openshift">Lightweight HTTP serving using nginx on OpenShift | OpenShift by Red Hat</a></p></li>
<li><p><a href="http://blog.gideal.org/articles/2012/09/05/1346782192657.html">OpenShift DIY自己的服务器环境python2.7+django</a></p></li>
</ol>

]]></content>
  </entry>
  
</feed>
